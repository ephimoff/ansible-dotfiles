---
- name: Ensure dotfiles repository is cloned locally
  git:
    repo: "{{ dotfiles_repo }}"
    dest: "{{ dotfiles_repo_local_destination }}"
    accept_hostkey: "{{ dotfiles_repo_accept_hostkey }}"

# - name: Ensure all configured dotfiles are links.
#   shell: "ls -F {{ dotfiles_home }}/{{ item }}"
#   register: existing_dotfile_info
#   failed_when: false
#   check_mode: no
#   changed_when: false
#   with_items: "{{ dotfiles_files }}"

# - name: Remove existing dotfiles file if a replacement is being linked.
#   file:
#     path: "{{ dotfiles_home }}/{{ dotfiles_files[item.0] }}"
#     state: absent
#   when: "'@' not in item.1.stdout"
#   with_indexed_items: "{{ existing_dotfile_info.results }}"

# - name: Check if old dotfiles are present
#   file:
#     path: "{{ item }}"
#     state: file or link
#   with_items: "{{ dotfiles_files }}"
#   register: backup_dotfiles

- name: Backup existing dotfiles
  copy:
    src: "{{ general.local_home }}/{{ item }}"
    dest: "{{ dotfiles_backup_location }}"
  with_items: "{{ dotfiles_files }}"
  ignore_errors: yes


- name: Link dotfiles into home folder
  file:
    src: "{{ dotfiles_repo_local_destination }}/dotfiles/{{ item }}"
    dest: "{{ general.local_home }}/{{ item }}"
    state: link
    force: yes
  with_items: "{{ dotfiles_files }}"



# - name: Link dotfiles into home folder
#   file:
#     src: "{{general.local_home}}/Projects/ansible-dotfiles/dotfiles/{{ item }}"
#     dest: "{{general.local_home}}/{{ item }}"
#     state: link
#     force: yes
#   with_items: "{{ dotfiles }}"


