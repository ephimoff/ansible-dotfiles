- name: 'finder | keep folders on top when sorting by name'
  osx_defaults:
    domain: com.apple.finder
    key: _FXSortFoldersFirst
    type: bool
    value: true
    state: present

- name: 'finder | show full path in title'
  osx_defaults:
    domain: com.apple.finder
    key: _FXShowPosixPathInTitle
    type: bool
    value: true
    state: present

- name: 'finder | show status bar'
  osx_defaults:
    domain: com.apple.finder
    key: ShowStatusBar
    type: bool
    value: true
    state: present

- name: 'finder | show path bar'
  osx_defaults:
    domain: com.apple.finder
    key: ShowPathbar
    type: bool
    value: true
    state: present

- name: 'finder | when performing a search, search the current folder by default'
  osx_defaults:
    domain: com.apple.finder
    key: FXDefaultSearchScope
    type: string
    value: SCcf
    state: present

- name: 'finder | use column view in all Finder windows by default'
  osx_defaults:
    domain: com.apple.finder
    key: FXPreferredViewStyle
    type: string
    value: clmv
    state: present

- name: 'finder | show all filename extensions'
  osx_defaults:
    domain: NSGlobalDomain
    key: AppleShowAllExtensions
    type: bool
    value: true
    state: present

- name: 'general | avoid creating .DS_Store files on network volumes'
  # shell: defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
  osx_defaults:
    domain: com.apple.desktopservices
    key: DSDontWriteNetworkStores
    type: bool
    value: true
    state: present

- name: 'general | avoid creating .DS_Store files on USB Volumes'
  # shell: defaults write com.apple.desktopservices DSDontWriteUSBStores -bool true
  osx_defaults:
    domain: com.apple.desktopservices
    key: DSDontWriteUSBStores
    type: bool
    value: true
    state: present

- name: 'general | expand save panel by default'
  # shell: defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
  osx_defaults:
    domain: NSGlobalDomain
    key: NSNavPanelExpandedStateForSaveMode
    type: bool
    value: true
    state: present

- name: 'general | sets default save target to be a local disk, not iCloud'
  # shell: defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false
  osx_defaults:
    domain: NSGlobalDomain
    key: NSDocumentSaveNewDocumentsToCloud
    type: bool
    value: false
    state: present

- name: 'general | disable the `Are you sure you want to open this application?` dialog'
  # shell: defaults write com.apple.LaunchServices LSQuarantine -bool false
  osx_defaults:
    domain: com.apple.LaunchServices
    key: LSQuarantine
    type: bool
    value: false
    state: present

- name: 'general | show battery percent'
  # shell: defaults write com.apple.menuextra.battery ShowPercent -bool true
  osx_defaults:
    domain: com.apple.menuextra.battery
    key: ShowPercent
    type: bool
    value: true
    state: present

- name: 'general | prevent Photos from opening automatically when devices are plugged in'
  # shell: defaults -currentHost write com.apple.ImageCapture disableHotPlug -bool true
  osx_defaults:
    domain: com.apple.ImageCapture
    host: currentHost
    key: disableHotPlug
    type: bool
    value: true
    state: present

- name: 'general | top right screen corner → put display to sleep'
  # shell: defaults write com.apple.dock wvous-tr-corner -int 5 && defaults write com.apple.dock wvous-tr-modifier -int 0
  osx_defaults:
    domain: write com.apple.dock
    key: "{{ item.key }}"
    type: "{{ item.type }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    - {key: 'wvous-tr-corner', type: 'int', value: '5'}
    - {key: 'wvous-tr-modifier', type: 'int', value: '0'}
# Hot corners:
# Possible values:
#  0: no-op
#  2: Mission Control
#  3: Show application windows
#  4: Desktop
#  5: Start screen saver
#  6: Disable screen saver
#  7: Dashboard
# 10: Put display to sleep
# 11: Launchpad
# 12: Notification Center

- name: 'trackpad | enable tap to click'
  # shell: defaults -currentHost write NSGlobalDomain "com.apple.mouse.tapBehavior" -int 1
  osx_defaults:
    domain: NSGlobalDomain
    host: currentHost
    key: com.apple.mouse.tapBehavior
    type: int
    value: 1
    state: present

- name: 'trackpad | disable look up'
  # shell: defaults -currentHost write NSGlobalDomain "com.apple.trackpad.threeFingerTapGesture" -int 0
  osx_defaults:
    domain: NSGlobalDomain
    host: currentHost
    key: com.apple.trackpad.threeFingerTapGesture
    type: int
    value: 0
    state: present

- name: 'trackpad | enable 3 finger drag'
  # shell: defaults -currentHost write NSGlobalDomain "com.apple.trackpad.threeFingerDragGesture" -int 1
  osx_defaults:
    domain: NSGlobalDomain
    host: currentHost
    key: com.apple.trackpad.threeFingerDragGesture
    type: int
    value: 1
    state: present

- name: 'trackpad | disable swipe between pages'
  # shell: defaults write NSGlobalDomain AppleEnableSwipeNavigateWithScrolls -bool false
  osx_defaults:
    domain: NSGlobalDomain
    key: AppleEnableSwipeNavigateWithScrolls
    type: bool
    value: false
    state: present

- name: 'keyboard | enable full keyboard access for all controls, (e.g. enable Tab in modal dialogs)'
  # shell: defaults write NSGlobalDomain AppleKeyboardUIMode -int 2
  osx_defaults:
    domain: NSGlobalDomain
    key: AppleKeyboardUIMode
    type: int
    value: 2
    state: present

- name: 'keyboard | disable auto-correct'
  # shell: defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false
  osx_defaults:
    domain: NSGlobalDomain
    key: NSAutomaticSpellingCorrectionEnabled
    type: bool
    value: false
    state: present

- name: 'mail.app | copy email addresses as `foo@example.com` instead of `Foo Bar <foo@example.com>`'
  # shell: defaults write com.apple.mail AddressesIncludeNameOnPasteboard -bool false
  osx_defaults:
    domain: com.apple.mail
    key: AddressesIncludeNameOnPasteboard
    type: bool
    value: false
    state: present

- name: 'safari | prevent Safari from opening ‘safe’ files automatically after downloading'
  # shell: defaults write com.apple.Safari AutoOpenSafeDownloads -bool false
  osx_defaults:
    domain: com.apple.Safari
    key: AutoOpenSafeDownloads
    type: bool
    value: false
    state: present

- name: 'safari | disable Safari’s thumbnail cache for History and Top Sites'
  # shell: defaults write com.apple.Safari DebugSnapshotsUpdatePolicy -int 2
  osx_defaults:
    domain: com.apple.Safari
    key: DebugSnapshotsUpdatePolicy
    type: int
    value: 2
    state: present
    
- name: 'safari | enable Safari’s debug menu'
  # shell: defaults write com.apple.Safari IncludeInternalDebugMenu -bool true
  osx_defaults:
    domain: com.apple.Safari
    key: IncludeInternalDebugMenu
    type: bool
    value: true
    state: present

- name: 'safari | stop Safari sending searches to Apple'
  # shell: defaults write com.apple.Safari UniversalSearchEnabled -bool false
  osx_defaults:
    domain: com.apple.Safari
    key: UniversalSearchEnabled
    type: bool
    value: false
    state: present

- name: 'screen | require password immediately after sleep or screen saver begins'
  # shell: defaults write com.apple.screensaver askForPassword -int 1 && defaults write com.apple.screensaver askForPasswordDelay -int 0
  osx_defaults:
    domain: com.apple.screensaver
    key: "{{ item.key }}"
    type: "{{ item.type }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    - {key: 'askForPassword', type: 'int', value: '1'}
    - {key: 'askForPasswordDelay', type: 'int', value: '0'}

- name: 'screen | save screenshots to the {{ screenshots.location }} directory'
  # shell: defaults write com.apple.screencapture location -string "{{general.local_home}}/Pictures"
  osx_defaults:
    domain: com.apple.screencapture
    key: location
    type: string
    value: "{{ screenshots.location }}"
    state: present

- name: 'screen | save screenshots in {{ screenshots.format }} format'
  # shell: defaults write com.apple.screencapture type -string "png"
  osx_defaults:
    domain: com.apple.screencapture
    key: type
    type: string
    value: "{{ screenshots.format }}"
    state: present

- name: 'screen | disable shadow in screenshots'
  # shell: defaults write com.apple.screencapture disable-shadow -bool true
  osx_defaults:
    domain: com.apple.screencapture
    key: disable-shadow
    type: bool
    value: true
    state: present

- name: 'terminal | make Snazzy theme the default one'
  # shell: defaults write com.apple.Terminal 'Default Window Settings' -string Snazzy && defaults write com.apple.Terminal 'Startup Window Settings' -string Snazzy
  osx_defaults:
    domain: com.apple.Terminal
    key: "{{ item.key }}"
    type: "{{ item.type }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    - {key: 'Default Window Settings', type: 'string', value: 'Snazzy'}
    - {key: 'Startup Window Settings', type: 'string', value: 'Snazzy'}

- name: 'terminal | disable the annoying line marks'
  # shell: defaults write com.apple.Terminal ShowLineMarks -int 0
  osx_defaults:
    domain: com.apple.Terminal
    key: ShowLineMarks
    type: int
    value: 0
    state: present

- name: 'calendar | start week on Monday'
  # shell: defaults write com.apple.ical "first day of the week" 1
  osx_defaults:
    domain: com.apple.ical
    key: "first day of the week"
    # type: int
    value: 1
    state: present

- name: 'security | enable firewall'
  shell: /usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate on
  become: yes

- name: 'security | enable stealth mode'
  shell: /usr/libexec/ApplicationFirewall/socketfilterfw --setstealthmode on
  become: yes

- name: 'textedit | use plain text mode for new TextEdit documents'
  # shell: defaults write com.apple.TextEdit RichText -int 0
  osx_defaults:
    domain: com.apple.TextEdit
    key: RichText
    type: int
    value: 0
    state: present

- name: 'textedit | open and save files as UTF-8 in TextEdit'
  # shell: defaults write com.apple.TextEdit PlainTextEncoding -int 4 && defaults write com.apple.TextEdit PlainTextEncodingForWrite -int 4
  osx_defaults:
    domain: com.apple.TextEdit
    key: "{{ item.key }}"
    type: "{{ item.type }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    - {key: 'PlainTextEncoding', type: 'int', value: '4'}
    - {key: 'PlainTextEncodingForWrite', type: 'int', value: '4'}

- name: 'messages | disable continuous spell checking'
  shell: defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add "continuousSpellCheckingEnabled" -bool false
  
